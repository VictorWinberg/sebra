{"version":3,"file":"useAssignmentsQueries-DGTiaBcs.js","sources":["../../src/features/assignments/api/assignmentsApi.ts","../../src/features/assignments/hooks/useAssignmentsQueries.ts"],"sourcesContent":["import {\n  deleteQuery,\n  insertManyQuery,\n  insertQuery,\n  query,\n  selectAllQuery,\n  selectOneQuery,\n  updateQuery\n} from '@/api/DummyDB';\nimport { Company } from '@/features/companies/api/companiesApi';\nimport { Contact } from '@/features/contacts/api/contactsApi';\nimport { groupBy, pick, toMap } from '@/utils';\n\nexport type Assignment = AssignmentRecord & {\n  responsibleContacts: Contact[];\n  externalContact: Contact | undefined;\n  company: Company | undefined;\n};\n\nexport type AssignmentRecord = {\n  assignmentId: number;\n  assignmentName: string;\n  externalContactId: number;\n  companyId: number;\n  relevantFiles: string;\n  fee: number;\n  type: string;\n  status: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\ntype ResponsibleContact = {\n  assignmentId: number;\n  contactId: number;\n};\n\nexport const fetchAssignments = async (): Promise<Assignment[]> => {\n  const [assignments, responsibleContacts, contacts, companies] = await Promise.all([\n    query<Assignment>(`SELECT * FROM assignments ORDER BY assignment_name`),\n    query<ResponsibleContact>(`SELECT * FROM assignment_responsible_contacts`),\n    query<Contact>(`SELECT * FROM contacts`),\n    query<Company>(`SELECT * FROM companies`)\n  ]);\n\n  const responsibleContactsMap = groupBy(responsibleContacts, 'assignmentId');\n  const contactsMap = toMap(contacts, 'contactId');\n  const companiesMap = toMap(companies, 'companyId');\n\n  return assignments.map(transformAssignment(responsibleContactsMap, contactsMap, companiesMap));\n};\n\nexport const fetchAssignment = async (assignmentId: number): Promise<Assignment> => {\n  const [assignment, responsibleContacts, contacts, companies] = await Promise.all([\n    selectOneQuery<AssignmentRecord>('assignments', { assignmentId }),\n    selectAllQuery<ResponsibleContact>('assignment_responsible_contacts', { assignmentId }),\n    query<Contact>(`SELECT * FROM contacts`),\n    query<Company>(`SELECT * FROM companies`)\n  ]);\n\n  const responsibleContactsMap = groupBy(responsibleContacts, 'assignmentId');\n  const contactsMap = toMap(contacts, 'contactId');\n  const companiesMap = toMap(companies, 'companyId');\n\n  return transformAssignment(responsibleContactsMap, contactsMap, companiesMap)(assignment);\n};\n\nexport const createAssignment = async (assignment: Partial<Assignment>) => {\n  const record = await insertQuery<AssignmentRecord>(\n    'assignments',\n    pick(assignment, ['assignmentName', 'externalContactId', 'companyId', 'relevantFiles', 'fee', 'type', 'status'])\n  );\n  await createAssignmentResponsibleContacts({ ...assignment, ...record });\n  return record;\n};\n\nexport const updateAssignment = async (assignment: Partial<Assignment>) => {\n  await updateQuery<AssignmentRecord>(\n    'assignments',\n    pick(assignment, ['assignmentName', 'externalContactId', 'companyId', 'relevantFiles', 'fee', 'type', 'status']),\n    pick(assignment, ['assignmentId'])\n  );\n  await updateAssignmentResponsibleContacts(assignment);\n};\n\nexport const deleteAssignment = async ({ assignmentId }: Pick<Assignment, 'assignmentId'>) => {\n  await deleteQuery<AssignmentRecord>('assignments', { assignmentId });\n  await deleteAssignmentResponsibleContacts({ assignmentId });\n};\n\nfunction transformAssignment(\n  responsibleContactsMap: Map<number, ResponsibleContact[]>,\n  contactsMap: Map<number, Contact>,\n  companiesMap: Map<number, Company>\n): (value: AssignmentRecord) => Assignment {\n  return (assignment: AssignmentRecord) => {\n    const responsibleContactsList = responsibleContactsMap.get(assignment.assignmentId) || [];\n    const responsibleContactIds = responsibleContactsList.map((c) => c.contactId);\n    const responsibleContacts = responsibleContactIds.map((contactId) => contactsMap.get(contactId)).filter((c) => !!c);\n    const externalContact = contactsMap.get(assignment.externalContactId);\n    const company = companiesMap.get(assignment.companyId);\n\n    return { ...assignment, responsibleContacts, externalContact, company };\n  };\n}\n\nexport const fetchAssignmentStatuses = async () => {\n  const assignmentStatuses = await query<{ status: string }>(`SELECT DISTINCT status FROM assignments`);\n  return assignmentStatuses.map(({ status }) => status).filter(Boolean);\n};\n\nconst createAssignmentResponsibleContacts = async ({ assignmentId, responsibleContacts }: Partial<Assignment>) => {\n  if (!assignmentId || !responsibleContacts) return;\n\n  await insertManyQuery<ResponsibleContact>(\n    'assignment_responsible_contacts',\n    responsibleContacts.map(({ contactId }) => ({ assignmentId, contactId }))\n  );\n};\n\nconst updateAssignmentResponsibleContacts = async (assignment: Partial<Assignment>) => {\n  await deleteAssignmentResponsibleContacts(assignment);\n  await createAssignmentResponsibleContacts(assignment);\n};\n\nconst deleteAssignmentResponsibleContacts = async ({ assignmentId }: Partial<Assignment>) => {\n  if (!assignmentId) return;\n  await deleteQuery<ResponsibleContact>('assignment_responsible_contacts', { assignmentId });\n};\n","import { useQuery } from '@tanstack/react-query';\n\nimport { fetchAssignment, fetchAssignments, fetchAssignmentStatuses } from '../api/assignmentsApi';\n\nexport const useAssignments = () => {\n  return useQuery({ queryKey: ['assignments'], queryFn: fetchAssignments });\n};\n\nexport const useAssignment = (assignmentId: number | undefined) => {\n  return useQuery({\n    queryKey: ['assignment', assignmentId],\n    queryFn: () => fetchAssignment(assignmentId!),\n    enabled: !!assignmentId\n  });\n};\n\nexport const useAssignmentStatuses = () => {\n  return useQuery({ queryKey: ['assignmentStatuses'], queryFn: fetchAssignmentStatuses });\n};\n"],"names":["fetchAssignments","assignments","responsibleContacts","contacts","companies","query","responsibleContactsMap","groupBy","contactsMap","toMap","companiesMap","transformAssignment","fetchAssignment","assignmentId","assignment","selectOneQuery","selectAllQuery","createAssignment","record","insertQuery","pick","createAssignmentResponsibleContacts","updateAssignment","updateQuery","updateAssignmentResponsibleContacts","deleteAssignment","deleteQuery","deleteAssignmentResponsibleContacts","contactId","externalContact","company","fetchAssignmentStatuses","status","insertManyQuery","useAssignments","useQuery","useAssignment","useAssignmentStatuses"],"mappings":"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"}