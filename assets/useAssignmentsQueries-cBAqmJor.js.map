{"version":3,"file":"useAssignmentsQueries-cBAqmJor.js","sources":["../../src/features/assignments/api/assignmentsApi.ts","../../src/features/assignments/hooks/useAssignmentsQueries.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nimport {\n  deleteQuery,\n  insertManyQuery,\n  insertQuery,\n  query,\n  selectAllQuery,\n  selectOneQuery,\n  updateQuery\n} from '@/api/DummyDB';\nimport { Company } from '@/features/companies/api/companiesApi';\nimport { Contact } from '@/features/contacts/api/contactsApi';\nimport { groupBy, pick, toMap } from '@/utils';\n\nexport type Assignment = AssignmentRecord & {\n  responsibleContacts: Contact[];\n  externalContact: Contact | undefined;\n  company: Company | undefined;\n};\n\nexport type AssignmentRecord = {\n  id: string;\n  assignmentName: string;\n  externalContactId: string;\n  companyId: string;\n  relevantFiles: string;\n  fee: number;\n  type: string;\n  status: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\ntype ResponsibleContact = {\n  assignmentId: string;\n  contactId: string;\n};\n\nexport const fetchAssignments = async (): Promise<Assignment[]> => {\n  const [assignments, responsibleContacts, contacts, companies] = await Promise.all([\n    query<Assignment>(`SELECT * FROM assignments ORDER BY assignment_name`),\n    query<ResponsibleContact>(`SELECT * FROM assignment_responsible_contacts`),\n    query<Contact>(`SELECT * FROM contacts`),\n    query<Company>(`SELECT * FROM companies`)\n  ]);\n\n  const responsibleContactsMap = groupBy(responsibleContacts, 'assignmentId');\n  const contactsMap = toMap(contacts, 'id');\n  const companiesMap = toMap(companies, 'id');\n\n  return assignments.map(transformAssignment(responsibleContactsMap, contactsMap, companiesMap));\n};\n\nexport const fetchAssignment = async (id: string): Promise<Assignment> => {\n  const [assignment, responsibleContacts, contacts, companies] = await Promise.all([\n    selectOneQuery<AssignmentRecord>('assignments', { id }),\n    selectAllQuery<ResponsibleContact>('assignment_responsible_contacts', { assignmentId: id }),\n    query<Contact>(`SELECT * FROM contacts`),\n    query<Company>(`SELECT * FROM companies`)\n  ]);\n\n  const responsibleContactsMap = groupBy(responsibleContacts, 'assignmentId');\n  const contactsMap = toMap(contacts, 'id');\n  const companiesMap = toMap(companies, 'id');\n\n  return transformAssignment(responsibleContactsMap, contactsMap, companiesMap)(assignment);\n};\n\nexport const createAssignment = async (assignment: Partial<Assignment>) => {\n  const record = await insertQuery<AssignmentRecord>(\n    'assignments',\n    pick({ ...assignment, id: uuidv4() }, [\n      'id',\n      'assignmentName',\n      'externalContactId',\n      'companyId',\n      'relevantFiles',\n      'fee',\n      'type',\n      'status'\n    ])\n  );\n  await createAssignmentResponsibleContacts({ ...assignment, ...record });\n  return record;\n};\n\nexport const updateAssignment = async (assignment: Partial<Assignment>) => {\n  await updateQuery<AssignmentRecord>(\n    'assignments',\n    pick(assignment, ['assignmentName', 'externalContactId', 'companyId', 'relevantFiles', 'fee', 'type', 'status']),\n    pick(assignment, ['id'])\n  );\n  await updateAssignmentResponsibleContacts(assignment);\n};\n\nexport const deleteAssignment = async ({ id }: Pick<Assignment, 'id'>) => {\n  await deleteQuery<AssignmentRecord>('assignments', { id });\n  await deleteAssignmentResponsibleContacts({ id });\n};\n\nfunction transformAssignment(\n  responsibleContactsMap: Map<string, ResponsibleContact[]>,\n  contactsMap: Map<string, Contact>,\n  companiesMap: Map<string, Company>\n): (value: AssignmentRecord) => Assignment {\n  return (assignment: AssignmentRecord) => {\n    const responsibleContactsList = responsibleContactsMap.get(assignment.id) || [];\n    const responsibleContactIds = responsibleContactsList.map((c) => c.contactId);\n    const responsibleContacts = responsibleContactIds.map((contactId) => contactsMap.get(contactId)).filter((c) => !!c);\n    const externalContact = contactsMap.get(assignment.externalContactId);\n    const company = companiesMap.get(assignment.companyId);\n\n    return { ...assignment, responsibleContacts, externalContact, company };\n  };\n}\n\nexport const fetchAssignmentStatuses = async () => {\n  const assignmentStatuses = await query<{ status: string }>(`SELECT DISTINCT status FROM assignments`);\n  return assignmentStatuses.map(({ status }) => status).filter(Boolean);\n};\n\nconst createAssignmentResponsibleContacts = async ({ id: assignmentId, responsibleContacts }: Partial<Assignment>) => {\n  if (!assignmentId || !responsibleContacts) return;\n\n  await insertManyQuery<ResponsibleContact>(\n    'assignment_responsible_contacts',\n    responsibleContacts.map(({ id: contactId }) => ({ assignmentId: assignmentId, contactId }))\n  );\n};\n\nconst updateAssignmentResponsibleContacts = async (assignment: Partial<Assignment>) => {\n  await deleteAssignmentResponsibleContacts(assignment);\n  await createAssignmentResponsibleContacts(assignment);\n};\n\nconst deleteAssignmentResponsibleContacts = async ({ id }: Partial<Assignment>) => {\n  if (!id) return;\n  await deleteQuery<ResponsibleContact>('assignment_responsible_contacts', { assignmentId: id });\n};\n","import { useQuery } from '@tanstack/react-query';\n\nimport { fetchAssignment, fetchAssignments, fetchAssignmentStatuses } from '../api/assignmentsApi';\n\nexport const useAssignments = () => {\n  return useQuery({ queryKey: ['assignments'], queryFn: fetchAssignments });\n};\n\nexport const useAssignment = (assignmentId: string | undefined) => {\n  return useQuery({\n    queryKey: ['assignment', assignmentId],\n    queryFn: () => fetchAssignment(assignmentId!),\n    enabled: !!assignmentId\n  });\n};\n\nexport const useAssignmentStatuses = () => {\n  return useQuery({ queryKey: ['assignmentStatuses'], queryFn: fetchAssignmentStatuses });\n};\n"],"names":["fetchAssignments","assignments","responsibleContacts","contacts","companies","query","responsibleContactsMap","groupBy","contactsMap","toMap","companiesMap","transformAssignment","fetchAssignment","id","assignment","selectOneQuery","selectAllQuery","createAssignment","record","insertQuery","pick","uuidv4","createAssignmentResponsibleContacts","updateAssignment","updateQuery","updateAssignmentResponsibleContacts","deleteAssignment","deleteQuery","deleteAssignmentResponsibleContacts","contactId","externalContact","company","fetchAssignmentStatuses","status","assignmentId","insertManyQuery","useAssignments","useQuery","useAssignment","useAssignmentStatuses"],"mappings":"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"}