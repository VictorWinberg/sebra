{"version":3,"file":"useLeadsQueries-CQw0aFJm.js","sources":["../../src/features/leads/api/leadsGQL.ts","../../src/features/leads/api/leadsLocal.ts","../../src/features/leads/hooks/useLeadsQueries.ts"],"sourcesContent":["import { graphql } from '@/api/gql';\nimport {\n  Lead,\n  CreateLeadMutation,\n  DeleteLeadMutation,\n  GetLeadQuery,\n  GetLeadQueryVariables,\n  GetLeadsQuery,\n  UpdateLeadMutation\n} from '@/api/gql/graphql';\nimport { requestGQL } from '@/hooks/useGraphQL';\nimport { pick } from '@/utils';\n\nexport const getLeadsGQL = (): Promise<GetLeadsQuery> =>\n  requestGQL(\n    graphql(`\n      query GetLeads {\n        Leads(sort: \"rank\") {\n          docs {\n            id\n            leadTitle\n            description\n            stage\n            rank\n            createdAt\n            updatedAt\n\n            company {\n              id\n              companyName\n              address\n              industry\n              phone\n              email\n              website\n              organizationNumber\n              createdAt\n              updatedAt\n            }\n\n            contact {\n              id\n              contactName\n              email\n              phone\n              jobTitle\n              address\n              notes\n              createdAt\n              updatedAt\n            }\n\n            assignment {\n              id\n              assignmentName\n              fee\n              status\n              type\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n    `)\n  )();\n\nexport const getLeadGQL = (data: GetLeadQueryVariables): Promise<GetLeadQuery> =>\n  requestGQL(\n    graphql(`\n      query GetLead($id: String!) {\n        Lead(id: $id) {\n          id\n          leadTitle\n          description\n          stage\n          rank\n          createdAt\n          updatedAt\n\n          company {\n            id\n            companyName\n            address\n            industry\n            phone\n            email\n            website\n            organizationNumber\n            createdAt\n            updatedAt\n          }\n\n          contact {\n            id\n            contactName\n            email\n            phone\n            jobTitle\n            address\n            notes\n            createdAt\n            updatedAt\n          }\n\n          assignment {\n            id\n            assignmentName\n            fee\n            status\n            type\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    `)\n  )({ id: data.id });\n\nexport const createLeadGQL = (data: Lead): Promise<CreateLeadMutation> =>\n  requestGQL(\n    graphql(`\n      mutation CreateLead($data: mutationLeadInput!) {\n        createLead(data: $data) {\n          id\n        }\n      }\n    `)\n  )({\n    data: pick(\n      {\n        ...data,\n        company: data.company?.id,\n        contact: data.contact?.id,\n        assignment: data.assignment?.id\n      },\n      ['leadTitle', 'description', 'stage', 'rank', 'company', 'contact', 'assignment']\n    )\n  });\n\nexport const updateLeadGQL = ({ id, ...data }: Lead): Promise<UpdateLeadMutation> =>\n  requestGQL(\n    graphql(`\n      mutation UpdateLead($id: String!, $data: mutationLeadUpdateInput!) {\n        updateLead(id: $id, data: $data) {\n          id\n        }\n      }\n    `)\n  )({\n    id,\n    data: pick(\n      {\n        ...data,\n        company: data.company?.id,\n        contact: data.contact?.id,\n        assignment: data.assignment?.id\n      },\n      ['leadTitle', 'description', 'stage', 'rank', 'company', 'contact', 'assignment']\n    )\n  });\n\nexport const deleteLeadGQL = ({ id }: Lead): Promise<DeleteLeadMutation> =>\n  requestGQL(\n    graphql(`\n      mutation DeleteLead($id: String!) {\n        deleteLead(id: $id) {\n          id\n        }\n      }\n    `)\n  )({ id });\n","import { v4 as uuidv4 } from 'uuid';\n\nimport { deleteQuery, insertQuery, query, updateQuery } from '@/api/DummyDB';\nimport {\n  Assignment,\n  Company,\n  Contact,\n  CreateLeadMutation,\n  DeleteLeadMutation,\n  GetLeadsQuery,\n  Lead,\n  Maybe,\n  UpdateLeadMutation,\n  Workspace\n} from '@/api/gql/graphql';\nimport { FlatAssignment } from '@/features/assignments/api/assignmentsLocal';\nimport { FlatCompany } from '@/features/companies/api/companiesLocal';\nimport { FlatContact } from '@/features/contacts/api/contactsLocal';\nimport { AssertKeys, pick, toMap } from '@/utils';\n\n// TODO: Store in DB?\nexport const LEAD_STAGES = ['Intresse', 'Pitch', 'Affär', 'Uppföljning'];\n\ntype LocalLead = {\n  id: string;\n  leadTitle: string;\n  description: string;\n  stage: string;\n  rank: number;\n  contact: string;\n  company: string;\n  assignment: string;\n  workspace?: Workspace;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport const verify: AssertKeys<LocalLead, Omit<Lead, '__typename'>> = true;\n\ntype FlatLead = Omit<Lead, 'contact' | 'company' | 'assignment' | 'workspace'> & {\n  contact?: string;\n  company?: string;\n  assignment?: string;\n};\n\nexport const getLeadsLocal = async (): Promise<GetLeadsQuery> => {\n  const assignments = toMap(await query<FlatAssignment>(`SELECT * FROM assignments`), 'id');\n  const contacts = toMap(await query<FlatContact>(`SELECT * FROM contacts`), 'id');\n  const companies = toMap(await query<FlatCompany>(`SELECT * FROM companies`), 'id');\n  const leads = await query<FlatLead>(`SELECT * FROM leads ORDER BY rank`);\n  const docs = leads.map(transformFlatLead(assignments, contacts, companies));\n  return { Leads: { docs } };\n};\n\nexport const createLeadLocal = async (data: Lead): Promise<CreateLeadMutation> => {\n  const params = pick(\n    { ...data, id: uuidv4(), contact: data.contact?.id, company: data.company?.id, assignment: data.assignment?.id },\n    ['id', 'leadTitle', 'description', 'stage', 'rank', 'contact', 'company', 'assignment']\n  );\n  const lead = await insertQuery<FlatLead>('leads', params);\n  return { createLead: lead };\n};\n\nexport const updateLeadLocal = async (data: Lead): Promise<UpdateLeadMutation> => {\n  const params = pick(\n    { ...data, contact: data.contact?.id, company: data.company?.id, assignment: data.assignment?.id },\n    ['id', 'leadTitle', 'description', 'stage', 'rank', 'contact', 'company', 'assignment']\n  );\n  const lead = await updateQuery<FlatLead>('leads', params, pick(data, ['id']));\n  return { updateLead: lead };\n};\n\nexport const deleteLeadLocal = async ({ id }: Pick<Lead, 'id'>): Promise<DeleteLeadMutation> => {\n  await deleteQuery('leads', { id });\n  return { deleteLead: { id } };\n};\n\nfunction transformFlatLead(\n  assignments: Map<string | number, FlatAssignment>,\n  contacts: Map<string | number, FlatContact>,\n  companies: Map<string | number, FlatCompany>\n): (value: FlatLead) => Lead {\n  return (lead) => {\n    return {\n      ...lead,\n      assignment: assignments.get(lead.assignment || '') as unknown as Maybe<Assignment>,\n      contact: contacts.get(lead.contact || '') as unknown as Maybe<Contact>,\n      company: companies.get(lead.company || '') as unknown as Maybe<Company>\n    };\n  };\n}\n","import { useQuery } from '@tanstack/react-query';\n\nimport { useIsDemo } from '@/hooks/useIsDemo';\nimport { getLeadsGQL } from '../api/leadsGQL';\nimport { getLeadsLocal } from '../api/leadsLocal';\n\nexport const useLeads = () => {\n  const isDemo = useIsDemo();\n  const fn = isDemo ? getLeadsLocal : getLeadsGQL;\n  return useQuery({\n    queryKey: ['leads'],\n    queryFn: () => fn(),\n    select: (data) => data.Leads?.docs?.filter((i) => !!i) || []\n  });\n};\n"],"names":["getLeadsGQL","requestGQL","graphql","createLeadGQL","data","pick","_a","_b","_c","updateLeadGQL","id","deleteLeadGQL","LEAD_STAGES","getLeadsLocal","assignments","toMap","query","contacts","companies","transformFlatLead","createLeadLocal","params","uuidv4","insertQuery","updateLeadLocal","updateQuery","deleteLeadLocal","deleteQuery","lead","useLeads","fn","useIsDemo","useQuery","i"],"mappings":"uaAaO,MAAMA,EAAc,IACzBC,EACEC,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAiDP,CACH,IAsDWC,EAAiBC,cAC5B,OAAAH,EACEC,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMP,CACH,EAAE,CACA,KAAMG,EACJ,CACE,GAAGD,EACH,SAASE,EAAAF,EAAK,UAAL,YAAAE,EAAc,GACvB,SAASC,EAAAH,EAAK,UAAL,YAAAG,EAAc,GACvB,YAAYC,EAAAJ,EAAK,aAAL,YAAAI,EAAiB,EAC/B,EACA,CAAC,YAAa,cAAe,QAAS,OAAQ,UAAW,UAAW,YAAY,CAClF,CACF,CAAC,GAEUC,EAAgB,CAAC,CAAE,GAAAC,EAAI,GAAGN,CACrC,IAAA,WAAA,OAAAH,EACEC,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMP,CACH,EAAE,CACA,GAAAQ,EACA,KAAML,EACJ,CACE,GAAGD,EACH,SAASE,EAAAF,EAAK,UAAL,YAAAE,EAAc,GACvB,SAASC,EAAAH,EAAK,UAAL,YAAAG,EAAc,GACvB,YAAYC,EAAAJ,EAAK,aAAL,YAAAI,EAAiB,EAC/B,EACA,CAAC,YAAa,cAAe,QAAS,OAAQ,UAAW,UAAW,YAAY,CAClF,CACF,CAAC,GAEUG,EAAgB,CAAC,CAAE,GAAAD,CAAA,IAC9BT,EACEC,EAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMP,CACH,EAAE,CAAE,GAAAQ,CAAI,CAAA,ECtJGE,EAAc,CAAC,WAAY,QAAS,QAAS,aAAa,EAwB1DC,EAAgB,SAAoC,CAC/D,MAAMC,EAAcC,EAAM,MAAMC,EAAsB,2BAA2B,EAAG,IAAI,EAClFC,EAAWF,EAAM,MAAMC,EAAmB,wBAAwB,EAAG,IAAI,EACzEE,EAAYH,EAAM,MAAMC,EAAmB,yBAAyB,EAAG,IAAI,EAGjF,MAAO,CAAE,MAAO,CAAE,MAFJ,MAAMA,EAAgB,mCAAmC,GACpD,IAAIG,EAAkBL,EAAaG,EAAUC,CAAS,CAAC,CACxD,EACpB,EAEaE,EAAkB,MAAOhB,GAA4C,WAChF,MAAMiB,EAAShB,EACb,CAAE,GAAGD,EAAM,GAAIkB,IAAU,SAAShB,EAAAF,EAAK,UAAL,YAAAE,EAAc,GAAI,SAASC,EAAAH,EAAK,UAAL,YAAAG,EAAc,GAAI,YAAYC,EAAAJ,EAAK,aAAL,YAAAI,EAAiB,EAAG,EAC/G,CAAC,KAAM,YAAa,cAAe,QAAS,OAAQ,UAAW,UAAW,YAAY,CAAA,EAGjF,MAAA,CAAE,WADI,MAAMe,EAAsB,QAASF,CAAM,EAE1D,EAEaG,EAAkB,MAAOpB,GAA4C,WAChF,MAAMiB,EAAShB,EACb,CAAE,GAAGD,EAAM,SAASE,EAAAF,EAAK,UAAL,YAAAE,EAAc,GAAI,SAASC,EAAAH,EAAK,UAAL,YAAAG,EAAc,GAAI,YAAYC,EAAAJ,EAAK,aAAL,YAAAI,EAAiB,EAAG,EACjG,CAAC,KAAM,YAAa,cAAe,QAAS,OAAQ,UAAW,UAAW,YAAY,CAAA,EAGjF,MAAA,CAAE,WADI,MAAMiB,EAAsB,QAASJ,EAAQhB,EAAKD,EAAM,CAAC,IAAI,CAAC,CAAC,EAE9E,EAEasB,EAAkB,MAAO,CAAE,GAAAhB,MACtC,MAAMiB,EAAY,QAAS,CAAE,GAAAjB,CAAI,CAAA,EAC1B,CAAE,WAAY,CAAE,GAAAA,CAAA,IAGzB,SAASS,EACPL,EACAG,EACAC,EAC2B,CAC3B,OAAQU,IACC,CACL,GAAGA,EACH,WAAYd,EAAY,IAAIc,EAAK,YAAc,EAAE,EACjD,QAASX,EAAS,IAAIW,EAAK,SAAW,EAAE,EACxC,QAASV,EAAU,IAAIU,EAAK,SAAW,EAAE,CAAA,EAG/C,CCpFO,MAAMC,EAAW,IAAM,CAEtB,MAAAC,EADSC,IACKlB,EAAgBb,EACpC,OAAOgC,EAAS,CACd,SAAU,CAAC,OAAO,EAClB,QAAS,IAAMF,EAAG,EAClB,OAAS1B,YAAS,QAAAG,GAAAD,EAAAF,EAAK,QAAL,YAAAE,EAAY,OAAZ,YAAAC,EAAkB,OAAQ0B,GAAM,CAAC,CAACA,KAAM,CAAC,EAAA,CAC5D,CACH"}