{"version":3,"file":"useContactsQueries-BDDHK5Vo.js","sources":["../../src/features/contacts/api/contactsApi.ts","../../src/features/contacts/hooks/useContactsQueries.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nimport { deleteQuery, query, insertQuery, updateQuery, selectOneQuery } from '@/api/DummyDB';\nimport { Company } from '@/features/companies/api/companiesApi';\nimport { pick, toMap } from '@/utils';\n\nexport type Contact = ContactRecord & { company?: Company };\n\nexport type ContactRecord = {\n  id: string;\n  contactName: string;\n  email: string;\n  phone: string;\n  jobTitle: string;\n  companyId: string;\n  position: string;\n  address: string;\n  notes: string;\n  lastInteractionDate: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport const fetchContacts = async (): Promise<Contact[]> => {\n  const contacts = await query<Contact>(`SELECT * FROM contacts ORDER BY contact_name`);\n  const companies = toMap(await query<Company>(`SELECT * FROM companies`), 'id');\n\n  return contacts.map((contact) => ({ ...contact, company: companies.get(contact.companyId) }));\n};\n\nexport const fetchContact = async (id: string) => {\n  return await selectOneQuery<ContactRecord>('contacts', { id });\n};\n\nexport const createContact = async (contact: Partial<Contact>) => {\n  return await insertQuery<ContactRecord>(\n    'contacts',\n    pick({ ...contact, id: uuidv4() }, [\n      'id',\n      'contactName',\n      'email',\n      'phone',\n      'jobTitle',\n      'companyId',\n      'position',\n      'address',\n      'notes',\n      'lastInteractionDate'\n    ])\n  );\n};\n\nexport const updateContact = async (contact: Partial<Contact>) => {\n  return await updateQuery<ContactRecord>(\n    'contacts',\n    pick(contact, [\n      'contactName',\n      'email',\n      'phone',\n      'jobTitle',\n      'companyId',\n      'position',\n      'address',\n      'notes',\n      'lastInteractionDate'\n    ]),\n    pick(contact, ['id'])\n  );\n};\n\nexport const deleteContact = async ({ id }: Pick<Contact, 'id'>) => {\n  return await deleteQuery<ContactRecord>('contacts', { id });\n};\n","import { useQuery } from '@tanstack/react-query';\n\nimport { fetchContact, fetchContacts } from '../api/contactsApi';\n\nexport const useContacts = () => {\n  return useQuery({ queryKey: ['contacts'], queryFn: fetchContacts });\n};\n\nexport const useContact = (contactId: string | undefined) => {\n  return useQuery({\n    queryKey: ['contact', contactId],\n    queryFn: () => fetchContact(contactId!),\n    enabled: !!contactId\n  });\n};\n"],"names":["fetchContacts","contacts","query","companies","toMap","contact","fetchContact","id","selectOneQuery","createContact","insertQuery","pick","uuidv4","updateContact","updateQuery","deleteContact","deleteQuery","useContacts","useQuery","useContact","contactId"],"mappings":"0bAuBO,MAAMA,EAAgB,SAAgC,CACrD,MAAAC,EAAW,MAAMC,EAAe,8CAA8C,EAC9EC,EAAYC,EAAM,MAAMF,EAAe,yBAAyB,EAAG,IAAI,EAE7E,OAAOD,EAAS,IAAKI,IAAa,CAAE,GAAGA,EAAS,QAASF,EAAU,IAAIE,EAAQ,SAAS,GAAI,CAC9F,EAEaC,EAAe,MAAOC,GAC1B,MAAMC,EAA8B,WAAY,CAAE,GAAAD,CAAI,CAAA,EAGlDE,EAAgB,MAAOJ,GAC3B,MAAMK,EACX,WACAC,EAAK,CAAE,GAAGN,EAAS,GAAIO,KAAY,CACjC,KACA,cACA,QACA,QACA,WACA,YACA,WACA,UACA,QACA,qBAAA,CACD,CAAA,EAIQC,EAAgB,MAAOR,GAC3B,MAAMS,EACX,WACAH,EAAKN,EAAS,CACZ,cACA,QACA,QACA,WACA,YACA,WACA,UACA,QACA,qBAAA,CACD,EACDM,EAAKN,EAAS,CAAC,IAAI,CAAC,CAAA,EAIXU,EAAgB,MAAO,CAAE,GAAAR,KAC7B,MAAMS,EAA2B,WAAY,CAAE,GAAAT,CAAI,CAAA,ECnE/CU,EAAc,IAClBC,EAAS,CAAE,SAAU,CAAC,UAAU,EAAG,QAASlB,EAAe,EAGvDmB,EAAcC,GAClBF,EAAS,CACd,SAAU,CAAC,UAAWE,CAAS,EAC/B,QAAS,IAAMd,EAAac,CAAU,EACtC,QAAS,CAAC,CAACA,CAAA,CACZ"}