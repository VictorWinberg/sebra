{"version":3,"file":"AssignmentEdit-CilSRhha.js","sources":["../../src/features/documents/components/DocumentReferenceTable.tsx","../../src/features/assignments/components/AssignmentEdit.tsx"],"sourcesContent":["import { useMemo } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n// material-ui\nimport { Link } from '@mui/material';\n\n// third party\nimport dayjs, { Dayjs } from 'dayjs';\n\n// project imports\nimport DataTable from '@/ui-component/DataTable';\nimport SebraDialog from '@/ui-component/SebraDialog';\nimport { DocumentContent, formatDate, toLocalTime, toMap } from '@/utils';\nimport { DocumentReference } from '../api/documentsApi';\nimport {\n  useCreateDocumentReference,\n  useDeleteDocumentReference,\n  useSaveDocument\n} from '../hooks/useDocumentsMutations';\nimport { useDocumentReferences, useDocuments } from '../hooks/useDocumentsQueries';\nimport DocumentForm from './DocumentForm';\n\ninterface DocumentReferenceTableProps {\n  defaultValues: Omit<DocumentReference, 'documentId'>;\n}\n\nconst DocumentReferenceTable = ({ defaultValues }: DocumentReferenceTableProps) => {\n  const { data: documentReferences = [], isLoading } = useDocumentReferences(defaultValues);\n  const { data: files = [], isLoading: filesIsLoading } = useDocuments();\n\n  // TODO: Refactor to use a selector or similar\n  const documents: DocumentContent[] = useMemo(() => {\n    const fileMap = toMap(files, 'documentId');\n    return documentReferences.map((ref) => fileMap.get(ref.documentId)).filter((doc) => !!doc);\n  }, [files, documentReferences]);\n\n  const { mutate: saveDocument } = useSaveDocument();\n  const { mutate: createDocumentReference } = useCreateDocumentReference();\n  const { mutate: deleteDocumentReference } = useDeleteDocumentReference();\n\n  return (\n    <DataTable<DocumentContent>\n      data={documents}\n      getRowId={(row) => row.documentId}\n      state={{ isLoading: filesIsLoading || isLoading }}\n      columns={[\n        {\n          accessorKey: 'documentName',\n          header: 'Dokumentnamn',\n          Cell: ({ cell, row }) => (\n            <Link component={RouterLink} to={`/documents/${row.original.documentId}`}>\n              {cell.getValue<string>()}\n            </Link>\n          )\n        },\n        { accessorKey: 'content.type', accessorFn: (row) => row.content?.type, header: 'Filtyp', enableEditing: false },\n        {\n          accessorKey: 'content.lastModified',\n          accessorFn: (row) => dayjs(row.content?.lastModified),\n          header: 'Senast uppdaterad',\n          filterVariant: 'date-range',\n          enableEditing: false,\n          Cell: ({ cell }) => formatDate(toLocalTime(cell.getValue<Dayjs>()))\n        }\n      ]}\n      renderEditRowDialogContent={({ row, table }) => (\n        <SebraDialog\n          table={table}\n          row={row}\n          titles={{ creating: 'Nytt dokument', editing: 'Redigera dokument' }}\n          FormComponent={DocumentForm}\n        />\n      )}\n      onCreate={(row) =>\n        saveDocument(row, {\n          onSuccess: (documentId) => createDocumentReference({ ...defaultValues, documentId })\n        })\n      }\n      onUpdate={(row) => saveDocument(row)}\n      onDelete={(row) => deleteDocumentReference(row)}\n    />\n  );\n};\n\nexport default DocumentReferenceTable;\n","import { useMemo } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\n// material-ui\nimport { Box, Typography } from '@mui/material';\n\n// project imports\nimport DocumentReferenceTable from '@/features/documents/components/DocumentReferenceTable';\nimport InteractionTable from '@/features/interactions/components/InteractionTable';\nimport { useInteractions } from '@/features/interactions/hooks/useInteractionsQueries';\nimport { headerHeight } from '@/store/constant';\nimport ContentTabs from '@/ui-component/ContentTabs';\nimport FlexGrow from '@/ui-component/extended/FlexGrow';\nimport { FormActionButtons } from '@/ui-component/SebraForm';\nimport { formatDate, intersection } from '@/utils';\nimport { Assignment } from '../api/assignmentsApi';\nimport { useCreateAssignment, useDeleteAssignment, useUpdateAssignment } from '../hooks/useAssignmentsMutations';\nimport { useAssignment } from '../hooks/useAssignmentsQueries';\nimport AssignmentForm from './AssignmentForm';\n\n// ==============================|| ASSIGNMENT EDIT PAGE ||============================== //\n\nconst AssignmentEdit = () => {\n  const params = useParams();\n  const navigate = useNavigate();\n\n  const { data: assignment, isLoading } = useAssignment(params.id === 'new' ? undefined : params.id);\n  const { mutate: createAssignment } = useCreateAssignment();\n  const { mutate: updateAssignment } = useUpdateAssignment();\n  const { mutate: deleteAssignment } = useDeleteAssignment();\n\n  const { data: allInteractions = [], isLoading: interactionsIsLoading } = useInteractions();\n  const interactions = useMemo(\n    () =>\n      allInteractions.filter(\n        (interaction) => intersection(interaction.contacts, assignment?.responsibleContacts || [], 'id').length > 0\n      ),\n    [allInteractions, assignment]\n  );\n\n  const handleSubmit = (data: Partial<Assignment>) => {\n    if (assignment) {\n      updateAssignment(data);\n    } else {\n      createAssignment(data, {\n        onSuccess: (res) => navigate(`/home/assignments/${res.id}`)\n      });\n    }\n  };\n\n  if (isLoading) return;\n\n  return (\n    <AssignmentForm\n      formProps={{ values: assignment }}\n      onSubmit={handleSubmit}\n      renderTopContent={() => (\n        <Box sx={{ position: 'relative', mt: 1, mb: 3 }}>\n          <Typography variant=\"h4\" color=\"primary\">\n            {assignment ? 'Redigera uppdrag' : 'LÃ¤gg till uppdrag'}\n          </Typography>\n\n          <FormActionButtons\n            sx={{ position: 'absolute', top: 0, right: 0 }}\n            onDelete={assignment ? () => deleteAssignment(assignment, { onSuccess: () => navigate('..') }) : undefined}\n            onCancel={() => navigate(-1)}\n          />\n        </Box>\n      )}\n      renderBottomContent={() =>\n        assignment && (\n          <FlexGrow sx={{ mt: 1, minHeight: `calc(100vh - ${headerHeight}px - 1rem)` }}>\n            <ContentTabs\n              tabs={[\n                {\n                  id: 'interactions',\n                  label: 'Interaktioner',\n                  content: (\n                    <InteractionTable\n                      interactions={interactions}\n                      isLoading={interactionsIsLoading}\n                      defaultValues={{\n                        contacts: [...assignment.responsibleContacts, assignment.externalContact].filter((c) => !!c),\n                        interactionDate: formatDate()\n                      }}\n                    />\n                  )\n                },\n                {\n                  id: 'documents',\n                  label: 'Dokument',\n                  content: (\n                    <DocumentReferenceTable defaultValues={{ entityId: assignment.id, entityType: 'assignment' }} />\n                  )\n                }\n              ]}\n            />\n          </FlexGrow>\n        )\n      }\n    />\n  );\n};\n\nexport default AssignmentEdit;\n"],"names":["DocumentReferenceTable","defaultValues","documentReferences","isLoading","useDocumentReferences","files","filesIsLoading","useDocuments","documents","useMemo","fileMap","toMap","ref","doc","saveDocument","useSaveDocument","createDocumentReference","useCreateDocumentReference","deleteDocumentReference","useDeleteDocumentReference","jsx","DataTable","row","cell","Link","RouterLink","_a","dayjs","formatDate","toLocalTime","table","SebraDialog","DocumentForm","documentId","AssignmentEdit","params","useParams","navigate","useNavigate","assignment","useAssignment","createAssignment","useCreateAssignment","updateAssignment","useUpdateAssignment","deleteAssignment","useDeleteAssignment","allInteractions","interactionsIsLoading","useInteractions","interactions","interaction","intersection","handleSubmit","data","res","AssignmentForm","jsxs","Box","Typography","FormActionButtons","FlexGrow","headerHeight","ContentTabs","InteractionTable","c"],"mappings":"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"}